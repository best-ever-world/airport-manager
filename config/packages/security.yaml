security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    access_decision_manager:
        strategy: unanimous
        allow_if_all_abstain: false

    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: BestEverWorld\AirportManager\App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_token_refresh:
            provider: app_user_provider
            pattern: ^/api/token/refresh
            stateless: true
            refresh_jwt: ~

        api_auth:
            pattern: ^/api/auth/login
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/auth/login
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~
            logout:
                path: api_logout
    # Storing such data in configuration files is not a good idea, as this solution is inflexible and poorly scalable.
    # Ideally, a matrix of roles, privileges, permissions, and other rules should be stored in a database. This approach
    # would enable highly flexible and scalable functionality.
    access_control:
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/airports, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/airports/*, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/airports, roles: [ ROLE_OPERATOR ], methods: [POST] }
        - { path: ^/api/airports/*, roles: [ ROLE_OPERATOR ], methods: [POST] }
        - { path: ^/api/airports, roles: [ ROLE_OPERATOR ], methods: [PATCH] }
        - { path: ^/api/airports/*, roles: [ ROLE_OPERATOR ], methods: [PATCH] }
        - { path: ^/api/airports, roles: [ ROLE_OPERATOR ], methods: [DELETE] }
        - { path: ^/api/airports/*, roles: [ ROLE_OPERATOR ], methods: [DELETE] }
        - { path: ^/api/countries, roles: [ ROLE_OPERATOR ], methods: [GET] }
        - { path: ^/api/countries/*, roles: [ ROLE_OPERATOR ], methods: [GET] }
        - { path: ^/api/users/register, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/users, roles: [ ROLE_ADMIN, ROLE_OPERATOR ], methods: [GET, POST, PATCH, DELETE] }
        - { path: ^/api/users/*, roles: [ ROLE_ADMIN, ROLE_OPERATOR ], methods: [GET, POST, PATCH, DELETE] }
        - { path: ^/api/users/*/approve, roles: [ ROLE_ADMIN ], methods: [PATCH] }
        - { path: ^/api/users/*/disapprove, roles: [ ROLE_ADMIN ], methods: [PATCH] }
        - { path: ^/api/users/*/enable, roles: [ ROLE_ADMIN ], methods: [PATCH] }
        - { path: ^/api/users/*/disable, roles: [ ROLE_ADMIN ], methods: [PATCH] }
        - { path: ^/api/users/*/update-password, roles: [ ROLE_ADMIN, ROLE_OPERATOR ], methods: [PATCH] }
        - { path: ^/api/token/refresh, roles: [ ROLE_USER, ROLE_ADMIN, ROLE_OPERATOR ] }
        - { path: ^/api/auth/logout, role: [ ROLE_USER, ROLE_ADMIN, ROLE_OPERATOR ] }
        - { path: ^/api, roles: [ ROLE_USER, ROLE_ADMIN, ROLE_OPERATOR ] }

    role_hierarchy:
        ROLE_OPERATOR: ROLE_USER
        ROLE_ADMIN: ROLE_OPERATOR

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
