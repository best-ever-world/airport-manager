{
    "name": "best-ever-world/airport-manager",
    "description": "The best ever world Airport Manager application",
    "license": "proprietary",
    "type": "project",
    "keywords": [],
    "readme": "README.md",
    "authors": [
        {
            "name": "Andrii Sobol",
            "email": "a.v.sobol@gmail.com"
        }
    ],
    "homepage": "https://github.com/best-ever-world/airport-manager",
    "support": {
        "source": "https://github.com/best-ever-world/airport-manager",
        "docs": "https://github.com/best-ever-world/airport-manager",
        "security": "https://github.com/best-ever-world/airport-manager/security/policy"
    },
    "require": {
        "php": ">=8.3",
        "ext-ctype": "*",
        "ext-iconv": "*",
        "doctrine/doctrine-bundle": "^2.0",
        "doctrine/doctrine-migrations-bundle": "^3.0",
        "doctrine/orm": "^3.0",
        "gesdinet/jwt-refresh-token-bundle": "^1.3",
        "lexik/jwt-authentication-bundle": "^3.1",
        "nelmio/api-doc-bundle": "^4.0",
        "nelmio/cors-bundle": "^2.5",
        "pagerfanta/doctrine-orm-adapter": "^4.7",
        "phpdocumentor/reflection-docblock": "^5.0",
        "phpdocumentor/type-resolver": "^1.0",
        "phpstan/phpdoc-parser": "^1.0",
        "symfony/asset": "^7.0",
        "symfony/console": "^7.0",
        "symfony/dotenv": "^7.0",
        "symfony/expression-language": "^7.0",
        "symfony/flex": "^2.0",
        "symfony/framework-bundle": "^7.0",
        "symfony/property-access": "^7.0",
        "symfony/property-info": "^7.0",
        "symfony/runtime": "^7.0",
        "symfony/security-bundle": "7.*",
        "symfony/security-core": "7.*",
        "symfony/security-csrf": "7.*",
        "symfony/serializer": "^7.0",
        "symfony/twig-bundle": "^7.0",
        "symfony/uid": "^7.0",
        "symfony/validator": "^7.0",
        "symfony/yaml": "^7.0"
    },
    "require-dev": {
        "doctrine/doctrine-fixtures-bundle": "^3.0",
        "ergebnis/composer-normalize": "^2.0",
        "friendsofphp/php-cs-fixer": "^3.0",
        "php-parallel-lint/php-parallel-lint": "^1.0",
        "phpstan/phpstan": "^1.0",
        "phpunit/phpunit": "^9.0",
        "squizlabs/php_codesniffer": "^3.0",
        "symfony/browser-kit": "^7.0",
        "symfony/css-selector": "^7.0",
        "symfony/phpunit-bridge": "^7.0"
    },
    "replace": {
        "symfony/polyfill-ctype": "*",
        "symfony/polyfill-iconv": "*",
        "symfony/polyfill-php72": "*",
        "symfony/polyfill-php73": "*",
        "symfony/polyfill-php74": "*",
        "symfony/polyfill-php80": "*",
        "symfony/polyfill-php81": "*",
        "symfony/polyfill-php82": "*"
    },
    "conflict": {
        "symfony/symfony": "*"
    },
    "minimum-stability": "stable",
    "prefer-stable": true,
    "autoload": {
        "psr-4": {
            "BestEverWorld\\AirportManager\\Api\\": "src/Api",
            "BestEverWorld\\AirportManager\\App\\": "src/App"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "BestEverWorld\\AirportManager\\Fixtures\\": "./fixtures/",
            "BestEverWorld\\AirportManager\\Tests\\Api\\": "./tests/Api/",
            "BestEverWorld\\AirportManager\\Tests\\App\\": "./tests/App/",
            "BestEverWorld\\AirportManager\\Tests\\Data\\": "./tests/Data/"
        }
    },
    "config": {
        "allow-plugins": {
            "ergebnis/composer-normalize": true,
            "php-http/discovery": true,
            "symfony/flex": true,
            "symfony/runtime": true
        },
        "sort-packages": true
    },
    "extra": {
        "composer-normalize": {
            "indent-size": 4,
            "indent-style": "space"
        },
        "symfony": {
            "allow-contrib": false,
            "require": "7.*"
        }
    },
    "scripts": {
        "post-install-cmd": [
            "@auto-scripts"
        ],
        "post-update-cmd": [
            "@auto-scripts"
        ],
        "auto-scripts": {
            "cache:clear": "symfony-cmd",
            "assets:install %PUBLIC_DIR%": "symfony-cmd"
        },
        "dev:analyze": [
            "@dev:analyze:phpstan"
        ],
        "dev:analyze:phpstan": [
            "./vendor/bin/phpstan analyse --no-progress --memory-limit=1G"
        ],
        "dev:build:boot": "mkdir -p ./build/cache && mkdir -p ./build/coverage",
        "dev:build:clean": "rm -rf ./build/cache/*.* && rm -rf ./build/coverage/*.*",
        "dev:syntax": [
            "@dev:syntax:lint",
            "@dev:syntax:phpcs"
        ],
        "dev:syntax:composer-normalize": "composer normalize",
        "dev:syntax:fix": "./vendor/bin/phpcbf -d memory-limit=1G",
        "dev:syntax:lint": "./vendor/bin/parallel-lint ./fixtures ./src ./tests",
        "dev:syntax:phpcs": "./vendor/bin/phpcs -d memory-limit=1G",
        "dev:test": [
            "@dev:analyze",
            "@dev:syntax",
            "@dev:test:unit"
        ],
        "dev:test:unit": "./vendor/bin/phpunit ./tests --colors=always",
        "dev:test:unit:coverage:html": "./vendor/bin/phpunit ./tests --colors=always --coverage-html ./build/coverage/coverage-html/",
        "dev:test:unit:coverage:text": "./vendor/bin/phpunit ./tests --colors=always --coverage-text --coverage-clover ./build/coverage/clover.xml --coverage-cobertura ./build/coverage/cobertura.xml --coverage-crap4j ./build/coverage/crap4j.xml --coverage-xml ./build/coverage/coverage-xml --log-junit ./build/coverage/junit.xml",
        "dev:test:unit:suite-default": "./vendor/bin/phpunit ./tests --testsuite=default --colors=always"
    },
    "scripts-descriptions": {
        "dev:analyze": "Runs all static analysis checks.",
        "dev:analyze:phpstan": "Runs the PHPStan static analyzer.",
        "dev:build:boot": "Boot the build and cache directories.",
        "dev:build:clean": "Cleans the build and cache directories.",
        "dev:syntax": "Runs all syntax analysis checks.",
        "dev:syntax:composer-normalize": "Runs Composer normalize to to normalize composer.json in the working directory.",
        "dev:syntax:fix": "Runs PHP Coding Standards Fixer to check issues of pre-defined coding standards and fix them if possible.",
        "dev:syntax:lint": "Runs PHP Lint to check and detect syntax errors.",
        "dev:syntax:phpcs": "Runs PHP Coding Standards Fixer to check and detect violations of pre-defined coding standards.",
        "dev:test": "Runs all tests.",
        "dev:test:unit": "Runs PHPUnit tests.",
        "dev:test:unit:coverage:html": "Runs PHPUnit tests and generates Html coverage report.",
        "dev:test:unit:coverage:text": "Runs PHPUnit tests and generates Text coverage reports.",
        "dev:test:unit:suite-default": "Runs PHPUnit tests, default suite."
    }
}
